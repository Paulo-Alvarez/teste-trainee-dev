{"ast":null,"code":"var _class;\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class TodoService {\n  constructor() {\n    this.loadFromLocalStorage();\n  }\n  saveToLocalStorage() {\n    localStorage.setItem('todos', JSON.stringify(this.todos));\n  }\n  loadFromLocalStorage() {\n    const todosJson = localStorage.getItem('todos');\n    this.todos = todosJson ? JSON.parse(todosJson) : [{\n      id: 1,\n      title: 'make an awesome angular todo-list',\n      completed: true\n    }, {\n      id: 2,\n      title: 'deploy my awesome angular todo-list project on github.io',\n      completed: true\n    }, {\n      id: 3,\n      title: 'think about tasks I can example on my to do list project',\n      completed: false\n    }, {\n      id: 4,\n      title: 'give up about the exemples (you already have them)',\n      completed: false\n    }, {\n      id: 5,\n      title: \"what can I do next? Let's do a new project! :)\",\n      completed: false\n    }];\n    this.sortTodos();\n  }\n  getTodos() {\n    return of(this.todos);\n  }\n  updateLocalStorageAndSave() {\n    this.saveToLocalStorage();\n  }\n  addTodo(newTodo) {\n    this.todos.push(newTodo);\n    this.sortTodos();\n    this.updateLocalStorageAndSave();\n  }\n  updateTodo(updatedTodo) {\n    const index = this.todos.findIndex(todo => todo.id === updatedTodo.id);\n    if (index !== -1) {\n      this.todos[index] = updatedTodo;\n      this.sortTodos();\n      this.updateLocalStorageAndSave();\n    }\n  }\n  deleteTodo(todoId) {\n    const index = this.todos.findIndex(todo => todo.id === todoId);\n    if (index !== -1) {\n      this.todos.splice(index, 1);\n      this.sortTodos();\n      this.updateLocalStorageAndSave();\n    }\n  }\n  getTodoNewId() {\n    return this.todos.reduce((maxId, todo) => Math.max(maxId, todo.id), 0) + 1;\n  }\n  sortTodos() {\n    this.todos.sort((a, b) => {\n      if (a.completed && !b.completed) {\n        return 1;\n      } else if (!a.completed && b.completed) {\n        return -1;\n      } else {\n        return 0;\n      }\n    });\n  }\n  clearAll() {\n    this.todos = [];\n    this.updateLocalStorageAndSave();\n  }\n  clearCompletedTasks() {\n    this.todos = this.todos.filter(({\n      completed\n    }) => completed === false);\n    this.updateLocalStorageAndSave();\n  }\n}\n_class = TodoService;\n_class.ɵfac = function TodoService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["of","TodoService","constructor","loadFromLocalStorage","saveToLocalStorage","localStorage","setItem","JSON","stringify","todos","todosJson","getItem","parse","id","title","completed","sortTodos","getTodos","updateLocalStorageAndSave","addTodo","newTodo","push","updateTodo","updatedTodo","index","findIndex","todo","deleteTodo","todoId","splice","getTodoNewId","reduce","maxId","Math","max","sort","a","b","clearAll","clearCompletedTasks","filter","factory","ɵfac","providedIn"],"sources":["C:\\Users\\palva\\Desktop\\teste-trainee-dev\\src\\app\\shared\\services\\todo.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Todo } from '../models/todo.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TodoService {\r\n  private todos!: Todo[];\r\n\r\n  constructor() {\r\n    this.loadFromLocalStorage();\r\n  }\r\n\r\n  private saveToLocalStorage(): void {\r\n    localStorage.setItem('todos', JSON.stringify(this.todos));\r\n  }\r\n\r\n  private loadFromLocalStorage(): void {\r\n    const todosJson = localStorage.getItem('todos');\r\n    this.todos = todosJson ? JSON.parse(todosJson) : [\r\n      { id: 1, title: 'make an awesome angular todo-list', completed: true },\r\n      { id: 2, title: 'deploy my awesome angular todo-list project on github.io', completed: true },\r\n      { id: 3, title: 'think about tasks I can example on my to do list project', completed: false },\r\n      { id: 4, title: 'give up about the exemples (you already have them)', completed: false },\r\n      { id: 5, title: \"what can I do next? Let's do a new project! :)\", completed: false }\r\n    ];\r\n    this.sortTodos();\r\n  }\r\n\r\n  getTodos(): Observable<Todo[]> {\r\n    return of(this.todos);\r\n  }\r\n\r\n  private updateLocalStorageAndSave(): void {\r\n    this.saveToLocalStorage();\r\n  }\r\n\r\n  addTodo(newTodo: Todo): void {\r\n    this.todos.push(newTodo);\r\n    this.sortTodos();\r\n    this.updateLocalStorageAndSave();\r\n  }\r\n\r\n  updateTodo(updatedTodo: Todo): void {\r\n    const index = this.todos.findIndex(todo => todo.id === updatedTodo.id);\r\n    if (index !== -1) {\r\n      this.todos[index] = updatedTodo;\r\n      this.sortTodos();\r\n      this.updateLocalStorageAndSave();\r\n    }\r\n  }\r\n\r\n  deleteTodo(todoId: number): void {\r\n    const index = this.todos.findIndex(todo => todo.id === todoId);\r\n    if (index !== -1) {\r\n      this.todos.splice(index, 1);\r\n      this.sortTodos();\r\n      this.updateLocalStorageAndSave();\r\n    }\r\n  }\r\n\r\n  getTodoNewId(): number {\r\n    return this.todos.reduce((maxId, todo) => Math.max(maxId, todo.id), 0) + 1;\r\n  }\r\n\r\n  sortTodos() {\r\n    this.todos.sort((a, b) => {\r\n      if (a.completed && !b.completed) {\r\n        return 1;\r\n      } else if (!a.completed && b.completed) {\r\n        return -1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n  }\r\n\r\n  clearAll() {\r\n    this.todos = [];\r\n    this.updateLocalStorageAndSave();\r\n  }\r\n\r\n  clearCompletedTasks() {\r\n    this.todos = this.todos.filter(({ completed }) => completed === false);\r\n    this.updateLocalStorageAndSave();\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}