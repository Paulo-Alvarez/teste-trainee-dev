{"ast":null,"code":"import _defineProperty from \"C:/Users/palva/Desktop/teste-trainee-dev/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { localList } from './lang.js';\nimport { array as baseList } from 'badwords-list';\n/**\n * Profanity Filter class.\n * @public\n */\nexport class Filter {\n  /**\n   * Filter constructor.\n   *\n   * @param {FilterOptions} options - Constructor options for Filter class.\n   */\n  constructor(options = {}) {\n    /**\n     * List of words to filter.\n     * @type {array} list - List of words to filter.\n     */\n    _defineProperty(this, \"list\", []);\n    /**\n     * List of words to exclude from filter.\n     * @type {array} exclude - List of words to exclude from filter.\n     */\n    _defineProperty(this, \"exclude\", []);\n    /**\n     * Character used to replace profane words.\n     * @type {string} placeHolder - Character used to replace profane words.\n     */\n    _defineProperty(this, \"placeHolder\", '*');\n    /**\n     * Regular expression used to sanitize words before comparing them to blocklist.\n     * @type {string} regex - Regular expression used to sanitize words before comparing them to blocklist.\n     */\n    _defineProperty(this, \"regex\", /[^a-zA-Z0-9|$|@]|\\^/g);\n    /**\n     * Regular expression used to replace profane words with placeHolder.\n     * @type {string} replaceRegex - Regular expression used to replace profane words with placeHolder.\n     */\n    _defineProperty(this, \"replaceRegex\", /\\w/g);\n    /**\n     * Regular expression used to split a string into words.\n     * @type {string} splitRegex - Regular expression used to split a string into words.\n     */\n    _defineProperty(this, \"splitRegex\", /\\b|_/g);\n    Object.assign(this, {\n      list: options.emptyList && [] || Array.prototype.concat.apply(localList, [baseList, options.list || []]),\n      exclude: options.exclude || [],\n      splitRegex: options.splitRegex || /\\b|_/g,\n      placeHolder: options.placeHolder || '*',\n      regex: options.regex || /[^a-zA-Z0-9|$|@]|\\^/g,\n      replaceRegex: options.replaceRegex || /\\w/g\n    });\n  }\n  /**\n   * Determine if a string contains profane language.\n   * @param {string} string - String to evaluate for profanity.\n   */\n  isProfane(string) {\n    return this.list.filter(word => {\n      const wordExp = new RegExp(`\\\\b${word.replace(/(\\W)/g, '\\\\$1')}\\\\b`, 'gi');\n      return !this.exclude.includes(word.toLowerCase()) && wordExp.test(string);\n    }).length > 0 || false;\n  }\n  /**\n   * Replace a word with placeHolder characters;\n   * @param {string} string - String to replace.\n   */\n  replaceWord(string) {\n    return string.replace(this.regex, '').replace(this.replaceRegex, this.placeHolder);\n  }\n  /**\n   * Evaluate a string for profanity and return an edited version.\n   * @param {string} input - String to filter.\n   */\n  clean(input) {\n    const delimiter = this.splitRegex.exec(input);\n    if (!input || !delimiter) {\n      return input;\n    }\n    return input.split(this.splitRegex).map(word => {\n      return this.isProfane(word) ? this.replaceWord(word) : word;\n    }).join(delimiter[0]);\n  }\n  /**\n   * Add word(s) to blocklist filter / remove words from whitelist filter\n   * @param {...string} words - Word(s) to add to blocklist\n   */\n  addWords(...words) {\n    this.list.push(...words);\n    words.map(word => word.toLowerCase()).forEach(word => {\n      if (this.exclude.includes(word)) {\n        this.exclude.splice(this.exclude.indexOf(word), 1);\n      }\n    });\n  }\n  /**\n   * Add words to allowlist filter\n   * @param {...string} words - Word(s) to add to allowlist.\n   */\n  removeWords(...words) {\n    this.exclude.push(...words.map(word => word.toLowerCase()));\n  }\n}","map":{"version":3,"names":["localList","array","baseList","Filter","constructor","options","_defineProperty","Object","assign","list","emptyList","Array","prototype","concat","apply","exclude","splitRegex","placeHolder","regex","replaceRegex","isProfane","string","filter","word","wordExp","RegExp","replace","includes","toLowerCase","test","length","replaceWord","clean","input","delimiter","exec","split","map","join","addWords","words","push","forEach","splice","indexOf","removeWords"],"sources":["C:/Users/palva/Desktop/teste-trainee-dev/node_modules/bad-words/dist/esm/badwords.js"],"sourcesContent":["import { localList } from './lang.js';\nimport { array as baseList } from 'badwords-list';\n/**\n * Profanity Filter class.\n * @public\n */\nexport class Filter {\n    /**\n     * List of words to filter.\n     * @type {array} list - List of words to filter.\n     */\n    list = [];\n    /**\n     * List of words to exclude from filter.\n     * @type {array} exclude - List of words to exclude from filter.\n     */\n    exclude = [];\n    /**\n     * Character used to replace profane words.\n     * @type {string} placeHolder - Character used to replace profane words.\n     */\n    placeHolder = '*';\n    /**\n     * Regular expression used to sanitize words before comparing them to blocklist.\n     * @type {string} regex - Regular expression used to sanitize words before comparing them to blocklist.\n     */\n    regex = /[^a-zA-Z0-9|$|@]|\\^/g;\n    /**\n     * Regular expression used to replace profane words with placeHolder.\n     * @type {string} replaceRegex - Regular expression used to replace profane words with placeHolder.\n     */\n    replaceRegex = /\\w/g;\n    /**\n     * Regular expression used to split a string into words.\n     * @type {string} splitRegex - Regular expression used to split a string into words.\n     */\n    splitRegex = /\\b|_/g;\n    /**\n     * Filter constructor.\n     *\n     * @param {FilterOptions} options - Constructor options for Filter class.\n     */\n    constructor(options = {}) {\n        Object.assign(this, {\n            list: (options.emptyList && []) ||\n                Array.prototype.concat.apply(localList, [baseList, options.list || []]),\n            exclude: options.exclude || [],\n            splitRegex: options.splitRegex || /\\b|_/g,\n            placeHolder: options.placeHolder || '*',\n            regex: options.regex || /[^a-zA-Z0-9|$|@]|\\^/g,\n            replaceRegex: options.replaceRegex || /\\w/g,\n        });\n    }\n    /**\n     * Determine if a string contains profane language.\n     * @param {string} string - String to evaluate for profanity.\n     */\n    isProfane(string) {\n        return (this.list.filter((word) => {\n            const wordExp = new RegExp(`\\\\b${word.replace(/(\\W)/g, '\\\\$1')}\\\\b`, 'gi');\n            return (!this.exclude.includes(word.toLowerCase()) && wordExp.test(string));\n        }).length > 0 || false);\n    }\n    /**\n     * Replace a word with placeHolder characters;\n     * @param {string} string - String to replace.\n     */\n    replaceWord(string) {\n        return string\n            .replace(this.regex, '')\n            .replace(this.replaceRegex, this.placeHolder);\n    }\n    /**\n     * Evaluate a string for profanity and return an edited version.\n     * @param {string} input - String to filter.\n     */\n    clean(input) {\n        const delimiter = this.splitRegex.exec(input);\n        if (!input || !delimiter) {\n            return input;\n        }\n        return input\n            .split(this.splitRegex)\n            .map((word) => {\n            return this.isProfane(word) ? this.replaceWord(word) : word;\n        })\n            .join(delimiter[0]);\n    }\n    /**\n     * Add word(s) to blocklist filter / remove words from whitelist filter\n     * @param {...string} words - Word(s) to add to blocklist\n     */\n    addWords(...words) {\n        this.list.push(...words);\n        words\n            .map((word) => word.toLowerCase())\n            .forEach((word) => {\n            if (this.exclude.includes(word)) {\n                this.exclude.splice(this.exclude.indexOf(word), 1);\n            }\n        });\n    }\n    /**\n     * Add words to allowlist filter\n     * @param {...string} words - Word(s) to add to allowlist.\n     */\n    removeWords(...words) {\n        this.exclude.push(...words.map((word) => word.toLowerCase()));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}